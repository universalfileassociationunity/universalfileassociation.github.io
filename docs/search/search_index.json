{
    "docs": [
        {
            "location": "/", 
            "text": "Download from the Unity Asset Store\n | \nDiscord Support\n \u00a0| \nMail Contact\n\n\nImaginationOverflow \nUniversal File Association\n plugin enables your apps and games to be configured as the default file handler (e.g .xpto) on iOS, Android, Windows 10 (UWP), Standalone (Linux, Mac, and Windows) and tvOS.\n\n\nRegistering your app/game as the default file handler means that every time one of your users tries to open a registered file type, your app/game will be activated in order to process the file.\n\n\nEach platform has its own way of registering file types, some use mime-types, others plain old file extensions, Universal File Association handles all the configurations, you just need to configure which extensions you wish to register.\n\n\nGetting Started\n\n\n\n\nHow to Use\n\n\nConfiguring the Plugin\n\n\nTesting\n\n\n\n\nSteam Integration\n\n\n\n\nConfiguring the Plugin\n\n\nMac integration details\n\n\n\n\nInside the Plugin\n\n\n\n\nOverview\n\n\nDetails on all supported platforms", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "How to Use  Configuring the Plugin  Testing", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#steam-integration", 
            "text": "Configuring the Plugin  Mac integration details", 
            "title": "Steam Integration"
        }, 
        {
            "location": "/#inside-the-plugin", 
            "text": "Overview  Details on all supported platforms", 
            "title": "Inside the Plugin"
        }, 
        {
            "location": "/GettingStarted/", 
            "text": "Universal File Association\n plugin enables your apps and games to be configured as the default file handler (e.g .xpto) on iOS, Android, Windows 10 (UWP), Standalone (Linux, Mac, and Windows) and tvOS.\n\n\nUsing the Plugin\n\n\nThe plugin uses a single event where you need to register in order to receive file activations on all platforms:\n\n\nvoid\n \nStart\n()\n\n\n{\n\n    \nImaginationOverflow\n.\nUniversalFileAssociation\n.\nFileAssociationManager\n.\nInstance\n.\nFileActivated\n \n+=\n \nFileActivatedHandler\n;\n\n\n}\n\n\n\nprivate\n \nvoid\n \nFileActivatedHandler\n(\nImaginationOverflow\n.\nUniversalFileAssociation\n.\nData\n.\nFileInformation\n \ns\n)\n\n\n{\n\n    \n//\n\n    \n//  my activation code\n\n    \n//\n\n\n}\n\n\n\nNever forget to remove your event registration when the \nGameObject\n where you registered it is \ndestroyed\n:\n\n\nvoid\n \nOnDestroy\n()\n\n\n{\n\n    \nImaginationOverflow\n.\nUniversalFileAssociation\n.\nFileAssociationManager\n.\nInstance\n.\nFileActivated\n \n-=\n \nFileActivatedHandler\n;\n\n\n}\n\n\n\n\n\nThe \nFileActivated\n event will be triggered when your game is \nstarted\n or \nresumed\n by a file activation.\n\n\nThe \nFileActivated\n event single argument \nFileInformation\n contains the filename, path, size, extension and a Stream of the activated file: \n\n\npublic\n \nclass\n \nFileInformation\n\n\n{\n\n    \npublic\n \nStream\n \nStream\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n    \npublic\n \nstring\n \nPath\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n    \npublic\n \nstring\n \nName\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n    \npublic\n \nstring\n \nFileExtension\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n    \npublic\n \nulong\n \nSize\n \n{\n \nget\n;\n \nset\n;\n \n}\n\n\n}\n\n\n\n\n\nConsider the following example:\n\n\nprivate\n \nvoid\n \nFileActivatedHandler\n(\nImaginationOverflow\n.\nUniversalFileAssociation\n.\nData\n.\nFileInformation\n \nfileActivated\n)\n\n\n{\n\n    \nvar\n \nsize\n \n=\n \nfileActivated\n.\nSize\n;\n\n    \nvar\n \nfileContent\n \n=\n \nnew\n \nStreamReader\n(\nfileActivated\n.\nStream\n).\nReadToEnd\n();\n\n    \nvar\n \nfileName\n \n=\n \nfileActivated\n.\nName\n;\n\n\n}\n\n\n\n\n\nThe FileInformation class of an activated file contains a Stream that enables you to read the complete file content. In the example above, the variable \nfileContent\n would contain the full content of the file.\n\n\nDepending on the operating system and activation it can be impossible to write on the file, check the \nInside the Plugin Section\n for more details on the operating systems and situations where writting is not possible.\n\n\nIf you have the game installed on your device right now, instead of using the site URI you can use the deep linking URI instead:\n\n\nConfiguring the Plugin\n\n\nThe configuration interface is under \nWindow\n -\n \nImaginationOverflow\n -\n \nUniversal File Association\n -\n \nConfiguration\n\n\n\n\n\n\nOn some platforms, the operating system asks the player what app she wishes to use after opening a file, the \nDisplay Name\n allows you to configure what name will the OS show on that occasion.\nThe \nSteam App Id\n is for Steam only games, you can read about Steam integration on its \nsection\n. \nThe plugin allows you to configure the file association globally on a per-platform basis.\n\n\nGlobal Configuration\n\n\n\n\nIf you wish to register the same file associations for all your target platforms, you only require to configure the Global settings, the plugin will propagate all data to all platforms as you build for them.\n\n\nWhile you setup your required extensions the plugin will automatically match them with a \nMime Type\n or \nUIT\n\n\nPer Platform Configuration\n\n\nWhen you wish to override any configuration for a specific platform you can do that by clicking on the specific platform checkbox. After that, you just need to fill out the Deep Linking and Domain Association data or leave it empty if you do not wish to support these features for that specific platform. Note that by checking a platform none of the global configurations will be used for that specific platform.\n\n\n\n\nIn the example above, we've changed the \nAndroid\n Deep Linking \nscheme\n to \nsudokuzenkaidroid\n and disabled the Domain Association capability. The remaining platforms will continue to use the global configurations.\n\n\nTesting\n\n\nAfter your game is deployed to a device, you can test the integration simply by clicking on a configured URI on any app or website. As an example, you can send yourself a message (on any messaging app) or an email with the proper URI.\n\n\nEditor\n\n\nWe included a simple interface where you can test your deep linking activation without deploying, you can insert any valid and invalid URIs in order to test your integration. \n\n\n\n\nWhen you press Debug, the LinkActivated will be triggered and your callback called if the application is running in the editor.\n\n\niOS/tvOS\n\n\nSimulator\n\n\nAfter your game is installed on a simulator, open a terminal and run the following command:\n\n\nxcrun simctl openurl booted \n[MY_URI_HERE]\n\n\n\n\n\nExamples\n\n\nxcrun simctl openurl booted \nsudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\n\n\n\n\n\nxcrun simctl openurl booted \nhttps://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl\n\n\n\n\n\nAndroid\n\n\nOpen a terminal on your development machine, open a terminal (console or powershell) and run the command:\n\n\nadb shell am start -W -a android.intent.action.VIEW -d \n[MY_URI_HERE]\n\n\n\n\n\nExamples\n\n\nadb shell am start -W -a android.intent.action.VIEW -d \nsudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\n\n\n\n\n\nadb shell am start -W -a android.intent.action.VIEW -d \nhttps://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl\n\n\n\n\n\nWindows 10\n\n\nYou can use windows run program to test your integration, just click on the \nWindows Button\n and \nR\n and place your URI on the command option and press \nOk\n. \n\n\n\nMacOS\n\n\nOpen up a terminal and use the \nOpen\n command:\n\nopen  \n[\nMY_URI_HERE\n]\n\n\n\n\nopen  sudokuzenkai://puzzle?q\n=\ncMOiw5XDlsOXw5zDnMKl\n\n\n\n\nLinux\n\n\nOn Linux you can use the xdg-open command to test your integration, open up a terminal and run the following command.\n\n\nxdg-open  \n[\nMY_URI_HERE\n]\n\n\n\n\n\nxdg-open  sudokuzenkai://puzzle?q\n=\ncMOiw5XDlsOXw5zDnMKl\n\n\n\n\nStandalone Caveats\n\n\nBuild for MacOS\n\n\nIf you make your Mac builds on MacOS the plugin will automatically configure everything that is required in order for it to work correctly. But if you make your MacOs build on Windows you will need to do some extra steps in order to fully configure your build to receive deep link activations. Due to Unity limitations, you \nwill need a Mac or a MacOs VM\n in order to completely use the plugin capabilities.\n\n\nBuilding for MacOS on Windows\n\n\nWhen the build is completed you will note that the build process created an extra folder named \nUniversalDeepLinkingScripts\n. This folder contains all tools required to correctly finish up the plugin configuration:\n\n\n\n\nCopy the \nUniversalDeepLinkingScripts\n and your deliverable (\nyou_game.app\n) to your Mac or VM.\n\n\nOpen a Terminal and navigate to the copied items location.\n\n\nRun the setup.sh script:\n\n./setup.sh\n\n\n\n\n\nIf everything goes as expected you should see something similar to the following image:\n\n\n\nFor more information on why you need to do this extra step check our \nInside the Plugin Section\n.\n\n\nLinux and Windows\n\n\nOn Windows and Linux standalone builds, the Deep Linking is only configured when the game runs the first time, so even if the player has the game installed on his machine, if he didn't play at least one time, the Deep Linking connection won't activate the game.\n\n\nWindows and Linux builds also only allow players to start your game via a deep link if the player clicks on a deep link after your game is already open the plugin won't react to this new activation.\n\n\nFor further details on why this happens, you can check our \nInside the Plugin Section\n.\n\n\nNotes\n\n\n\n\nIf you don't own a mac you can always create a \nMac VM\n\n\nIf you are targetting a platform that the plugin doesn't support, you will find that building to an unsupported platform will yield an error stating that the assembly \nImaginationOverflow.UniversalDeepLinking.Platform.dll\n is not present. To fix this you will find a dummy assembly under Assets\\Plugins\\ImaginationOverflow\\UniversalDeepLinking\\libs\\Dummy, configure it to be included on the unsupported platform that you are targetting and the error should be fixed.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#using-the-plugin", 
            "text": "The plugin uses a single event where you need to register in order to receive file activations on all platforms:  void   Start ()  { \n     ImaginationOverflow . UniversalFileAssociation . FileAssociationManager . Instance . FileActivated   +=   FileActivatedHandler ;  }  private   void   FileActivatedHandler ( ImaginationOverflow . UniversalFileAssociation . Data . FileInformation   s )  { \n     // \n     //  my activation code \n     //  }  \nNever forget to remove your event registration when the  GameObject  where you registered it is  destroyed :  void   OnDestroy ()  { \n     ImaginationOverflow . UniversalFileAssociation . FileAssociationManager . Instance . FileActivated   -=   FileActivatedHandler ;  }   The  FileActivated  event will be triggered when your game is  started  or  resumed  by a file activation.  The  FileActivated  event single argument  FileInformation  contains the filename, path, size, extension and a Stream of the activated file:   public   class   FileInformation  { \n     public   Stream   Stream   {   get ;   set ;   } \n\n     public   string   Path   {   get ;   set ;   } \n\n     public   string   Name   {   get ;   set ;   } \n\n     public   string   FileExtension   {   get ;   set ;   } \n\n     public   ulong   Size   {   get ;   set ;   }  }   Consider the following example:  private   void   FileActivatedHandler ( ImaginationOverflow . UniversalFileAssociation . Data . FileInformation   fileActivated )  { \n     var   size   =   fileActivated . Size ; \n     var   fileContent   =   new   StreamReader ( fileActivated . Stream ). ReadToEnd (); \n     var   fileName   =   fileActivated . Name ;  }   The FileInformation class of an activated file contains a Stream that enables you to read the complete file content. In the example above, the variable  fileContent  would contain the full content of the file.  Depending on the operating system and activation it can be impossible to write on the file, check the  Inside the Plugin Section  for more details on the operating systems and situations where writting is not possible.  If you have the game installed on your device right now, instead of using the site URI you can use the deep linking URI instead:", 
            "title": "Using the Plugin"
        }, 
        {
            "location": "/GettingStarted/#configuring-the-plugin", 
            "text": "The configuration interface is under  Window  -   ImaginationOverflow  -   Universal File Association  -   Configuration    On some platforms, the operating system asks the player what app she wishes to use after opening a file, the  Display Name  allows you to configure what name will the OS show on that occasion.\nThe  Steam App Id  is for Steam only games, you can read about Steam integration on its  section . \nThe plugin allows you to configure the file association globally on a per-platform basis.", 
            "title": "Configuring the Plugin"
        }, 
        {
            "location": "/GettingStarted/#global-configuration", 
            "text": "If you wish to register the same file associations for all your target platforms, you only require to configure the Global settings, the plugin will propagate all data to all platforms as you build for them.  While you setup your required extensions the plugin will automatically match them with a  Mime Type  or  UIT", 
            "title": "Global Configuration"
        }, 
        {
            "location": "/GettingStarted/#per-platform-configuration", 
            "text": "When you wish to override any configuration for a specific platform you can do that by clicking on the specific platform checkbox. After that, you just need to fill out the Deep Linking and Domain Association data or leave it empty if you do not wish to support these features for that specific platform. Note that by checking a platform none of the global configurations will be used for that specific platform.   In the example above, we've changed the  Android  Deep Linking  scheme  to  sudokuzenkaidroid  and disabled the Domain Association capability. The remaining platforms will continue to use the global configurations.", 
            "title": "Per Platform Configuration"
        }, 
        {
            "location": "/GettingStarted/#testing", 
            "text": "After your game is deployed to a device, you can test the integration simply by clicking on a configured URI on any app or website. As an example, you can send yourself a message (on any messaging app) or an email with the proper URI.", 
            "title": "Testing"
        }, 
        {
            "location": "/GettingStarted/#editor", 
            "text": "We included a simple interface where you can test your deep linking activation without deploying, you can insert any valid and invalid URIs in order to test your integration.    When you press Debug, the LinkActivated will be triggered and your callback called if the application is running in the editor.", 
            "title": "Editor"
        }, 
        {
            "location": "/GettingStarted/#iostvos", 
            "text": "", 
            "title": "iOS/tvOS"
        }, 
        {
            "location": "/GettingStarted/#simulator", 
            "text": "After your game is installed on a simulator, open a terminal and run the following command:  xcrun simctl openurl booted  [MY_URI_HERE]   Examples  xcrun simctl openurl booted  sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl   xcrun simctl openurl booted  https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl", 
            "title": "Simulator"
        }, 
        {
            "location": "/GettingStarted/#android", 
            "text": "Open a terminal on your development machine, open a terminal (console or powershell) and run the command:  adb shell am start -W -a android.intent.action.VIEW -d  [MY_URI_HERE]   Examples  adb shell am start -W -a android.intent.action.VIEW -d  sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl   adb shell am start -W -a android.intent.action.VIEW -d  https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl", 
            "title": "Android"
        }, 
        {
            "location": "/GettingStarted/#windows-10", 
            "text": "You can use windows run program to test your integration, just click on the  Windows Button  and  R  and place your URI on the command option and press  Ok .", 
            "title": "Windows 10"
        }, 
        {
            "location": "/GettingStarted/#macos", 
            "text": "Open up a terminal and use the  Open  command: open   [ MY_URI_HERE ]   open  sudokuzenkai://puzzle?q = cMOiw5XDlsOXw5zDnMKl", 
            "title": "MacOS"
        }, 
        {
            "location": "/GettingStarted/#linux", 
            "text": "On Linux you can use the xdg-open command to test your integration, open up a terminal and run the following command.  xdg-open   [ MY_URI_HERE ]   xdg-open  sudokuzenkai://puzzle?q = cMOiw5XDlsOXw5zDnMKl", 
            "title": "Linux"
        }, 
        {
            "location": "/GettingStarted/#standalone-caveats", 
            "text": "", 
            "title": "Standalone Caveats"
        }, 
        {
            "location": "/GettingStarted/#build-for-macos", 
            "text": "If you make your Mac builds on MacOS the plugin will automatically configure everything that is required in order for it to work correctly. But if you make your MacOs build on Windows you will need to do some extra steps in order to fully configure your build to receive deep link activations. Due to Unity limitations, you  will need a Mac or a MacOs VM  in order to completely use the plugin capabilities.", 
            "title": "Build for MacOS"
        }, 
        {
            "location": "/GettingStarted/#building-for-macos-on-windows", 
            "text": "When the build is completed you will note that the build process created an extra folder named  UniversalDeepLinkingScripts . This folder contains all tools required to correctly finish up the plugin configuration:   Copy the  UniversalDeepLinkingScripts  and your deliverable ( you_game.app ) to your Mac or VM.  Open a Terminal and navigate to the copied items location.  Run the setup.sh script: ./setup.sh   If everything goes as expected you should see something similar to the following image:  For more information on why you need to do this extra step check our  Inside the Plugin Section .", 
            "title": "Building for MacOS on Windows"
        }, 
        {
            "location": "/GettingStarted/#linux-and-windows", 
            "text": "On Windows and Linux standalone builds, the Deep Linking is only configured when the game runs the first time, so even if the player has the game installed on his machine, if he didn't play at least one time, the Deep Linking connection won't activate the game.  Windows and Linux builds also only allow players to start your game via a deep link if the player clicks on a deep link after your game is already open the plugin won't react to this new activation.  For further details on why this happens, you can check our  Inside the Plugin Section .", 
            "title": "Linux and Windows"
        }, 
        {
            "location": "/GettingStarted/#notes", 
            "text": "If you don't own a mac you can always create a  Mac VM  If you are targetting a platform that the plugin doesn't support, you will find that building to an unsupported platform will yield an error stating that the assembly  ImaginationOverflow.UniversalDeepLinking.Platform.dll  is not present. To fix this you will find a dummy assembly under Assets\\Plugins\\ImaginationOverflow\\UniversalDeepLinking\\libs\\Dummy, configure it to be included on the unsupported platform that you are targetting and the error should be fixed.", 
            "title": "Notes"
        }, 
        {
            "location": "/DomainAssociation/", 
            "text": "The documentation below is just a quick setup guide so that you can quickly integrate the Domain Association capability of the ImaginationOverflow Universal Deep Linking plugin if you wish to know more about this feature you can consult the official documentation:\n\n\n\n\nUniversal Links - iOS\n\n\nApp Links - Android\n\n\nUri Handling - Windows UWP\n\n\n\n\nNote\n that the Universal Deep Linking plugin \nalready handles all registration and configuration\n to support Domain Association, you won't need to change any configurations on your manifest or configuration files on your Unity project. \n\n\nThe plugin \ndoes not\n, however, create or configure the required files that you need to host on your website, nor the dev account configurations required to enables this capability on some platforms. \n\n\nThe following configuration steps are only required if you wish to use the Domain Association feature, if you are only using Deep Linking, you can skip these steps.\n\n\niOS/tvOS - Universal Links\n\n\nThe first thing you will need to do is activate the \nAssociated Domains\n service on your app id:\n\n\n\n\nLogin on your Apple developer account in \nhttps://developer.apple.com/\n\n\nIn Identifiers -\n App ID's, create or edit the app you wish to add Domain Association.\n\n\nCheck the \nAssociated Domains\n checkbox\n\n\nSave the changes\n\n\n\n\nAfter you added the Associated Domain service, your page should look like the following:\n\n\n\n\nFrom the above image, set-aside the \nPrefix\n and the \nID\n. In Sudoku Zenkai case the Prefix is \n5DVD99WQGR\n and the ID \ncom.imaginationoverflow.com.sudokuzenkai\n.\n\n\nNow you need to create a json file named \napple-app-site-association\n (no extension) with the following contents:\n\n\n{\n\n    \napplinks\n:\n \n{\n\n        \napps\n:\n \n[],\n\n        \ndetails\n:\n \n[\n\n            \n{\n\n                \nappID\n:\n \n[PREFIX].[ID]\n,\n\n                \npaths\n:\n \n[\n \n*\n]\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\nWith the file created you need to upload it to your website. The file should be accessible on either, the root or the \n.well-known\n directory:\n\n\nhttps://\nyour_domain\n/.well-known/apple-app-site-association\n\nor\n\nhttps://\nyour_domain\n/apple-app-site-association\n\n\n\n\nYou can check Sudoku Zenkai and Loyca (other of our projects) association files on:\n\nhttp://sudokuzenkai.imaginationoverflow.com/apple-app-site-association\n \n\n\nhttp://loyca.imaginationoverflow.com/.well-known/apple-app-site-association\n\n\nWith the above configuration, you are telling the iOS that all links to your website should be opened in your game, you may wish to configure only a few paths, to do that you can check the \nofficial documentation\n.\n\n\nFinally, your site must be using \nHTTPS\n, if you don't have it this feature won't work! \n\n\nAndroid - App Links\n\n\nThe first thing you need to configure the Domain Association is a \npackage name\n, to configure that on your Unity Project click on \nEdit\n -\n \nProject Settings\n -\n \nPlayer\n.\nIn the Android options you will find the \nPackage Name\n setting: \n\n\n\n\nFor more info on how to choose a package name checkout \nGoogle Documentation\n.\n\n\nThe second thing you need to have is a keystore, you need to sign your game before submitting it to the store, you can get more info on \nGoogle documentation\n about this topic.\n\n\nAfter creating your keystore, you need to get \nSHA-256 certificate fingerprint\n, to do that just run the following command on your terminal (note the keytool comes with the Java SDK) :\n\n\nkeytool -list -v -keystore mystorekeystore.keystore\n\n\n\n\nRunning this command should yield something similar to the following image:\n\n\n\nWith the package name and SHA-256 certificate fingerprint, you can finally create the \ndigital asset link\n file, the filename should be \nassetlinks.json\n\n\n[{\n\n  \nrelation\n:\n \n[\ndelegate_permission/common.handle_all_urls\n],\n\n  \ntarget\n:\n \n{\n\n    \nnamespace\n:\n \nandroid_app\n,\n\n    \npackage_name\n:\n \n[MY_APP_PACKAGE_NAME]\n,\n\n    \nsha256_cert_fingerprints\n:\n \n[\n[SHA256_FINGERPRINT_FROM_KEYTOOL]\n]\n\n  \n}\n\n\n}]\n\n\n\nFinally you need to host the file on your website, it needs to be available on the \nroot\n or \n.well-known\n directory.\n\n\nhttps://\nyour_domain\n/.well-known/assetlinks.json\n\nor\n\nhttps://\nyour_domain\n/assetlinks.json\n\n\n\n\nYou can check Sudoku Zenkai and Loyca digital asset link on the following links:\n\n\nhttps://sudokuzenkai.imaginationoverflow.com/assetlinks.json\n\n\nhttps://loyca.imaginationoverflow.com/.well-known/assetlinks.json\n\n\nThese files have optional configurations that you can use, for more info about these configurations check the \nofficial documentation\n.\n\n\nNote: You can get the production SHA-256 certificate fingerprint on your Google Play Console account, just navigate to Release Management -\n App signing and \n\n\nWindows UWP - Uri Handling\n\n\nTo enable Domain Association on UWP you need to reserve a game name on the Windows Dev Center dashboard, to do that you can follow the \noficial documentation\n.\n\n\nAfter you reserve your game name, you will need to go into the game settings under the Windows Dev Center dashboard, \nApp Management\n -\n \nApp identity\n:\n\n\n\n\nFrom there you can check your game \nPackage Family Name\n, just as seen in the picture above.\n\n\nWith it, you need to create a json file named \nwindows-app-web-link\n (no extension) and upload it to your website, under the \nroot\n or \n.well-know\n directory.\n\n\n[{\n\n  \npackageFamilyName\n:\n \n[YOUR_PACKAGE_FAMILY_NAME]\n,\n\n  \npaths\n:\n \n[\n \n*\n \n],\n\n  \nexcludePaths\n \n:\n \n[\n \n]\n\n \n}]\n \n\n\n\n\nFor some examples check out Sudoku Zenkai and Loyca \nwindows-app-web-link\n files:\n\n\nhttps://sudokuzenkai.imaginationoverflow.com/windows-app-web-link\n\n\nhttps://loyca.imaginationoverflow.com/windows-app-web-link\n\n\nYou can set up other configurations on windows-app-web-link for more info check the \nofficial documentation\n.\n\n\nFinally, it's mandatory that your website supports \nHTTPS\n, because the windows will make an HTTPS request to try to retrieve the link.\n\n\nNotes\n\n\n\n\nThe domain association feature only works for iOS, Android, and Windows (UWP).\n\n\nAt ImaginationOverflow we are using \nCloud Flare\n free tier service to enable \nHTTPS\n on all our domains.", 
            "title": "Domain Association"
        }, 
        {
            "location": "/DomainAssociation/#iostvos-universal-links", 
            "text": "The first thing you will need to do is activate the  Associated Domains  service on your app id:   Login on your Apple developer account in  https://developer.apple.com/  In Identifiers -  App ID's, create or edit the app you wish to add Domain Association.  Check the  Associated Domains  checkbox  Save the changes   After you added the Associated Domain service, your page should look like the following:   From the above image, set-aside the  Prefix  and the  ID . In Sudoku Zenkai case the Prefix is  5DVD99WQGR  and the ID  com.imaginationoverflow.com.sudokuzenkai .  Now you need to create a json file named  apple-app-site-association  (no extension) with the following contents:  { \n     applinks :   { \n         apps :   [], \n         details :   [ \n             { \n                 appID :   [PREFIX].[ID] , \n                 paths :   [   * ] \n             } \n         ] \n     }  }   With the file created you need to upload it to your website. The file should be accessible on either, the root or the  .well-known  directory:  https:// your_domain /.well-known/apple-app-site-association\n\nor\n\nhttps:// your_domain /apple-app-site-association  You can check Sudoku Zenkai and Loyca (other of our projects) association files on: http://sudokuzenkai.imaginationoverflow.com/apple-app-site-association    http://loyca.imaginationoverflow.com/.well-known/apple-app-site-association  With the above configuration, you are telling the iOS that all links to your website should be opened in your game, you may wish to configure only a few paths, to do that you can check the  official documentation .  Finally, your site must be using  HTTPS , if you don't have it this feature won't work!", 
            "title": "iOS/tvOS - Universal Links"
        }, 
        {
            "location": "/DomainAssociation/#android-app-links", 
            "text": "The first thing you need to configure the Domain Association is a  package name , to configure that on your Unity Project click on  Edit  -   Project Settings  -   Player .\nIn the Android options you will find the  Package Name  setting:    For more info on how to choose a package name checkout  Google Documentation .  The second thing you need to have is a keystore, you need to sign your game before submitting it to the store, you can get more info on  Google documentation  about this topic.  After creating your keystore, you need to get  SHA-256 certificate fingerprint , to do that just run the following command on your terminal (note the keytool comes with the Java SDK) :  keytool -list -v -keystore mystorekeystore.keystore  Running this command should yield something similar to the following image:  With the package name and SHA-256 certificate fingerprint, you can finally create the  digital asset link  file, the filename should be  assetlinks.json  [{ \n   relation :   [ delegate_permission/common.handle_all_urls ], \n   target :   { \n     namespace :   android_app , \n     package_name :   [MY_APP_PACKAGE_NAME] , \n     sha256_cert_fingerprints :   [ [SHA256_FINGERPRINT_FROM_KEYTOOL] ] \n   }  }]  \nFinally you need to host the file on your website, it needs to be available on the  root  or  .well-known  directory.  https:// your_domain /.well-known/assetlinks.json\n\nor\n\nhttps:// your_domain /assetlinks.json  You can check Sudoku Zenkai and Loyca digital asset link on the following links:  https://sudokuzenkai.imaginationoverflow.com/assetlinks.json  https://loyca.imaginationoverflow.com/.well-known/assetlinks.json  These files have optional configurations that you can use, for more info about these configurations check the  official documentation .  Note: You can get the production SHA-256 certificate fingerprint on your Google Play Console account, just navigate to Release Management -  App signing and", 
            "title": "Android - App Links"
        }, 
        {
            "location": "/DomainAssociation/#windows-uwp-uri-handling", 
            "text": "To enable Domain Association on UWP you need to reserve a game name on the Windows Dev Center dashboard, to do that you can follow the  oficial documentation .  After you reserve your game name, you will need to go into the game settings under the Windows Dev Center dashboard,  App Management  -   App identity :   From there you can check your game  Package Family Name , just as seen in the picture above.  With it, you need to create a json file named  windows-app-web-link  (no extension) and upload it to your website, under the  root  or  .well-know  directory.  [{ \n   packageFamilyName :   [YOUR_PACKAGE_FAMILY_NAME] , \n   paths :   [   *   ], \n   excludePaths   :   [   ] \n  }]    For some examples check out Sudoku Zenkai and Loyca  windows-app-web-link  files:  https://sudokuzenkai.imaginationoverflow.com/windows-app-web-link  https://loyca.imaginationoverflow.com/windows-app-web-link  You can set up other configurations on windows-app-web-link for more info check the  official documentation .  Finally, it's mandatory that your website supports  HTTPS , because the windows will make an HTTPS request to try to retrieve the link.", 
            "title": "Windows UWP - Uri Handling"
        }, 
        {
            "location": "/DomainAssociation/#notes", 
            "text": "The domain association feature only works for iOS, Android, and Windows (UWP).  At ImaginationOverflow we are using  Cloud Flare  free tier service to enable  HTTPS  on all our domains.", 
            "title": "Notes"
        }, 
        {
            "location": "/SteamIntegration/", 
            "text": "Regular Standalone Deep Linking opens up your game when someone clicks on a custom defined URI. But if your game is on Steam you are probably using its SDK or DRM capabilities to further enhance your players' experience.\n\n\nIf you open a Steam game from its installation folder, since it wasn't open via steam it probably won't be able to communicate with valve software in order to report achievements, stats, etc, or it won't simply launch due to the DRM feature.\n\n\nSo using the regular Deep Linking mechanism where we associate a custom URI to a game executable wouldn't work since the game would possibly lose functionality or simply wouldn't start.\n\n\nTo avoid this issue, instead of registering your game to your custom URI, we configure the target systems to open steam instead of your game, but we parameterize Steam to open your game as soon as it's initialized.\n\n\nConfiguring Steam Integration\n\n\nTo enable the Steam capability of ImaginationOverflow Deep Linking Plugin you first need to have a valid app id, for that you need to get access to \nSteam Direct\n. After that valve will attribute to your game an ID.\n\n\n\n\nAs an example, Sudoku Zenkai id is \n809850\n. \n\n\nThen you need to configure the plugin with this id:\n\n\n\n\nThe final step of the configuration to enable the Steam integration is setting the \nIsSteamBuild\n Property under \nDeepLinkManager\n:\n\n\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \ntrue\n;\n\n\n\n\n\nIf your game is on Steam there is a good chance that you offer DRM-free versions of it on other stores, so don't forget to turn off this option when making DRM-free standalone builds, a good way to do this automatically is using \ncompilation flags\n.\n\n\n#if STEAM_BUILD\n\n\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \ntrue\n;\n\n\n#else\n\n\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \nfalse\n;\n\n\n#endif\n\n\n\n\n\nMac and Steam Integration\n\n\nMac Deep Linking works a little different from the Windows and Linux, you have to take special care when integrating the plugin with Mac and Steam. On Linux and Windows, the plugin handles the registration of the Deep Link when the game is first open. This enables the plugin to register whatever it wants on these platforms. On Mac, the Deep Link feature is fully controlled by the OS and the plugin can't change the default configuration, which opens your game directly.\n\n\nThe OS itself doesn't know that is running a Steam game, so when the user clicks on a custom URI, the OS opens the game executable. This means that you need to explicitly delay the enforcement of the DRM until you know if the game was activated via Deep Linking or not.\n\n\nThe plugin is configured in a way that when it's running a Steam game on MacOS \nit will always\n fire the LinkActivated event even if the game wasn't activated via Deep Link. This way is possible to store the Deep Link before enforcing any DRM in the game. \n\n\nSolution Suggestion\n\n\nBelow is the code that we use on Sudoku Zenkai to handle this tricky issue, for Steam integration we are using \nSteamworks.NET\n.\n\n\nThe user flow for this situation is the following:\n\n\n\n\nUser clicks on a Deep Link.\n\n\nThe game opens\n\n\nThe game enforces DRM and launches the game on Steam.\n\n\nSteam launches (if not already running).\n\n\nSteam launches the game.\n\n\n\n\nTo ensure that we process the Deep Link that the user initially clicked we need to save it before enforcing the DRM, in the code below we do exactly that:\n\n\n\n\nThe game is activated via Deep Link.\n\n\nThe LinkActivated event is triggered.\n\n\nSave the link information (since it's impossible to have the game launch on steam via Deep Link)\n\n\nCheck if the game has steam access, if not restart.\n\n\nIf we are already on steam, load the previously saved Deep Link\n\n\nResume Deep Link activation.\n\n\n\n\nThis behavior is only possible because \nthe plugin always triggers\n the LinkActivated event (on Steam Mac builds) regardless if it was activated via a Deep Link or not.\n\n\n    \npublic\n \nvoid\n \nRegisterForActivation\n()\n\n    \n{\n\n\n#if UNITY_STANDALONE_OSX \n STEAM_BUILD\n\n        \nDeepLinkManager\n.\nInstance\n.\nLinkActivated\n \n+=\n \nSteamOsxActivation\n;\n\n\n#else\n\n        \nDeepLinkManager\n.\nInstance\n.\nLinkActivated\n \n+=\n \nInstance_LinkActivated\n;\n\n\n#endif\n\n    \n}\n\n\n    \nprivate\n \nvoid\n \nSteamOsxActivation\n(\nLinkActivation\n \ns\n)\n\n    \n{\n\n        \n//\n\n        \n//  On Steam OSX builds the plugin triggers the LinkActivated with the  \n\n        \n//  deep link data or with a null Uri if it wasn\nt activated \n\n        \n//  via Deep Linking\n\n        \n//\n\n        \nif\n \n(\nstring\n.\nIsNullOrEmpty\n(\ns\n.\nUri\n)\n \n==\n \nfalse\n)\n\n            \nYourGameStorage\n.\nSaveDeepLinkActivation\n(\ns\n);\n\n\n        \n//\n\n        \n//  Enforce DRM\n\n        \n//\n\n        \nif\n \n(\nSteamworks\n.\nSteamAPI\n.\nRestartAppIfNecessary\n(\nnew\n \nSteamworks\n.\nAppId_t\n([\nYourAppId\n])))\n\n        \n{\n\n            \nApplication\n.\nQuit\n();\n\n            \nreturn\n;\n\n        \n}\n\n\n        \n//\n\n        \n//  We are already running on Steam, so load any saved deep linking \n\n        \n//  activations\n\n        \n//\n\n        \ns\n \n=\n \nYourGameStorage\n.\nLoadDeepLinkActivation\n();\n\n\n        \nif\n \n(\ns\n \n==\n \nnull\n)\n\n            \nreturn\n;\n\n\n        \n//\n\n        \n//  Clear the activation ensuring that the game won\nt be activated again \n\n        \n//  with the same uri this depends on your storage infrastructure.\n\n        \n//  \n\n        \nYourGameStorage\n.\nClearDeepLinkActivation\n();\n\n\n        \n//\n\n        \n//  Process deep link activation\n\n        \n//\n\n        \nInstance_LinkActivated\n(\ns\n);\n\n    \n}\n\n\n\n\n\nThis behavior only happens when the game is running on Mac and you set the Steam flag to true, on the other combinations the plugin only fires the LinkActivated event in case of an actual activation.", 
            "title": "Steam Integration"
        }, 
        {
            "location": "/SteamIntegration/#configuring-steam-integration", 
            "text": "To enable the Steam capability of ImaginationOverflow Deep Linking Plugin you first need to have a valid app id, for that you need to get access to  Steam Direct . After that valve will attribute to your game an ID.   As an example, Sudoku Zenkai id is  809850 .   Then you need to configure the plugin with this id:   The final step of the configuration to enable the Steam integration is setting the  IsSteamBuild  Property under  DeepLinkManager :  ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   true ;   If your game is on Steam there is a good chance that you offer DRM-free versions of it on other stores, so don't forget to turn off this option when making DRM-free standalone builds, a good way to do this automatically is using  compilation flags .  #if STEAM_BUILD  ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   true ;  #else  ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   false ;  #endif", 
            "title": "Configuring Steam Integration"
        }, 
        {
            "location": "/SteamIntegration/#mac-and-steam-integration", 
            "text": "Mac Deep Linking works a little different from the Windows and Linux, you have to take special care when integrating the plugin with Mac and Steam. On Linux and Windows, the plugin handles the registration of the Deep Link when the game is first open. This enables the plugin to register whatever it wants on these platforms. On Mac, the Deep Link feature is fully controlled by the OS and the plugin can't change the default configuration, which opens your game directly.  The OS itself doesn't know that is running a Steam game, so when the user clicks on a custom URI, the OS opens the game executable. This means that you need to explicitly delay the enforcement of the DRM until you know if the game was activated via Deep Linking or not.  The plugin is configured in a way that when it's running a Steam game on MacOS  it will always  fire the LinkActivated event even if the game wasn't activated via Deep Link. This way is possible to store the Deep Link before enforcing any DRM in the game.", 
            "title": "Mac and Steam Integration"
        }, 
        {
            "location": "/SteamIntegration/#solution-suggestion", 
            "text": "Below is the code that we use on Sudoku Zenkai to handle this tricky issue, for Steam integration we are using  Steamworks.NET .  The user flow for this situation is the following:   User clicks on a Deep Link.  The game opens  The game enforces DRM and launches the game on Steam.  Steam launches (if not already running).  Steam launches the game.   To ensure that we process the Deep Link that the user initially clicked we need to save it before enforcing the DRM, in the code below we do exactly that:   The game is activated via Deep Link.  The LinkActivated event is triggered.  Save the link information (since it's impossible to have the game launch on steam via Deep Link)  Check if the game has steam access, if not restart.  If we are already on steam, load the previously saved Deep Link  Resume Deep Link activation.   This behavior is only possible because  the plugin always triggers  the LinkActivated event (on Steam Mac builds) regardless if it was activated via a Deep Link or not.       public   void   RegisterForActivation () \n     {  #if UNITY_STANDALONE_OSX   STEAM_BUILD \n         DeepLinkManager . Instance . LinkActivated   +=   SteamOsxActivation ;  #else \n         DeepLinkManager . Instance . LinkActivated   +=   Instance_LinkActivated ;  #endif \n     } \n\n     private   void   SteamOsxActivation ( LinkActivation   s ) \n     { \n         // \n         //  On Steam OSX builds the plugin triggers the LinkActivated with the   \n         //  deep link data or with a null Uri if it wasn t activated  \n         //  via Deep Linking \n         // \n         if   ( string . IsNullOrEmpty ( s . Uri )   ==   false ) \n             YourGameStorage . SaveDeepLinkActivation ( s ); \n\n         // \n         //  Enforce DRM \n         // \n         if   ( Steamworks . SteamAPI . RestartAppIfNecessary ( new   Steamworks . AppId_t ([ YourAppId ]))) \n         { \n             Application . Quit (); \n             return ; \n         } \n\n         // \n         //  We are already running on Steam, so load any saved deep linking  \n         //  activations \n         // \n         s   =   YourGameStorage . LoadDeepLinkActivation (); \n\n         if   ( s   ==   null ) \n             return ; \n\n         // \n         //  Clear the activation ensuring that the game won t be activated again  \n         //  with the same uri this depends on your storage infrastructure. \n         //   \n         YourGameStorage . ClearDeepLinkActivation (); \n\n         // \n         //  Process deep link activation \n         // \n         Instance_LinkActivated ( s ); \n     }   This behavior only happens when the game is running on Mac and you set the Steam flag to true, on the other combinations the plugin only fires the LinkActivated event in case of an actual activation.", 
            "title": "Solution Suggestion"
        }, 
        {
            "location": "/Internals/", 
            "text": "On this section, we talk a little on how the plugin works on each platform and explain why it has some caveats on some platforms. \n\n\nOverview\n\n\n\n\nThe plugin content can be found inside the folder \nPlugins/ImaginationOverflow/UniversalDeepLinking\n, making easy to install and update when required. \n\n\nWe included a simple \nDemo\n scene that allows you to test and play with the plugin before integrating it in your game.\n\n\nInside the \nlibs\n folder os all the required dlls in order for the plugin to work:\n\n\n\n\nImaginationOverflow.UniversalDeepLinking.dll\n - Contains the public API of the plugin\n\n\n.Core.dll\n - Contains the core elements of the plugin\n\n\n.Editor.dll\n - Contains the windows and user interface of the plugin\n\n\n.Platform.dll\n - Contains the specific implementation for each platform, Android, iOS, UWP and Standalone.\n\n\n\n\nThe \nTools\n folder contains external tools that the plugin requires in order to work correctly, right now, the only external tool we are using is \noptool\n, required for MacOs builds.\n\n\nThe plugin configurations are saved under \nResources/ImaginationOverflow/UniversalDeepLink\n, facilitating the use of source control systems on development. This file is also required on some build targets at runtime, reason why it's directly under the Resources folder.\n\n\nRuntime\n\n\nAt runtime the plugin creates a single \nGameObject\n and adds it to your current scene, this GameObject purpose is to ensure that all activation callbacks are called inside Unity main thread as well as propagate the \npause\n events of the game to the plugin. The latter enables the plugin to refresh the activation data on some mobile platforms.\n\n\nAndroid\n\n\nThe plugin handles all manifest registrations when you make a build, the plugin \ndoesn't\n override the default activity enabling it to work with the most used plugins in the Asset Store. The Deep Linking and Domain Association activation is checked everytime the game is opened or resumed.\n\n\niOS/tvOS\n\n\nThe iOS integration uses a static library \nlibUniversalDeepLink.a\n in order to receive information about the app activation. Just like on Android the plugin handles all registrations on \ninfo.plist\n and \nentitlements\n files. The library included in the plugin notifies it everytime the game was opened via deep link or domain association activation.\n\n\nWindows UWP (Windows Store Games)\n\n\nJust like the previous mobile platforms, the plugin automatically configures the \nPackage.appxmanifest\n file with your configuration. \n\n\nIn order for the plugin to work it edits the OnActivated event under \nApp.xaml.cs\n, \nApp.xaml.cpp\n or \nApp.cpp\n depending on what \nBuild Type\n (Xaml or D3D) and \nScripting Backend\n (.NET or IL2CPP) you configure. The plugin should also work on \nXbox UWP\n games but it was impossible to test on an actual console in order to get confirmation.\n\n\nLinux and Windows\n\n\nLinux the deep link registration is done the \nfirst time the player opens the game\n. To accomplish this the plugin creates a \nDesktop File\n on the player machine, enabling the operating system to set up the game as a target of a custom protocol. \n\n\nWindows, the game writes in the registry the information necessary to enable the OS to open the game every time the player clicks on a configured deep link URI.\n\n\nThe protocol registration is also done everytime the \nApplication.version\n is changed, enabling you to change the configuration with an update. \n\n\nIf the game build is for Steam, the plugin configures Steam to be the target of your custom URI instead of the game (this is done to work around DRM) but configures Steam to launch your game with the Uri that opened steam.\n\n\nLinux and Windows builds (Steam or Standalone) can't be activated via a Deep Link \nafter the game is already running.\n This is because the link activation information is passed via argument on the \nmain\n function, making it impossible (right now at least) to get information of the activation link after the game is already running.\n\n\nMac\n\n\nAll manifest registrations are handled by the plugin, the deep linking activation is deferred from our library into the game as it happens, so MacOs builds won't have the caveats that Windows and Linux have.\n\n\nIn order to support Deep Linking we had to make a \nlibrary\n (\nUniversalDeepLink.framework\n) that would intercept the activation events of the application itself since Unity doesn't allow the plugin to automatically link a library on the build process it must be done after the build. To make that possible the plugin includes the tool \noptool\n. \n\n\noptool allow us to inject the library into the game and collect all the activation events. If you build your game on MacOs the plugin \nwill automatically\n call optool and inject the library. If you make the build on any other OS you will need to make an extra step, just has explained on the \nGetting Started Section\n. \n\n\nThis requirement exists because optool was made for MacOs and the team couldn't in useful time port it to Windows.\n\n\nFor more info about how the library injection works check \nhere\n.", 
            "title": "Inside the Plugin"
        }, 
        {
            "location": "/Internals/#overview", 
            "text": "The plugin content can be found inside the folder  Plugins/ImaginationOverflow/UniversalDeepLinking , making easy to install and update when required.   We included a simple  Demo  scene that allows you to test and play with the plugin before integrating it in your game.  Inside the  libs  folder os all the required dlls in order for the plugin to work:   ImaginationOverflow.UniversalDeepLinking.dll  - Contains the public API of the plugin  .Core.dll  - Contains the core elements of the plugin  .Editor.dll  - Contains the windows and user interface of the plugin  .Platform.dll  - Contains the specific implementation for each platform, Android, iOS, UWP and Standalone.   The  Tools  folder contains external tools that the plugin requires in order to work correctly, right now, the only external tool we are using is  optool , required for MacOs builds.  The plugin configurations are saved under  Resources/ImaginationOverflow/UniversalDeepLink , facilitating the use of source control systems on development. This file is also required on some build targets at runtime, reason why it's directly under the Resources folder.", 
            "title": "Overview"
        }, 
        {
            "location": "/Internals/#runtime", 
            "text": "At runtime the plugin creates a single  GameObject  and adds it to your current scene, this GameObject purpose is to ensure that all activation callbacks are called inside Unity main thread as well as propagate the  pause  events of the game to the plugin. The latter enables the plugin to refresh the activation data on some mobile platforms.", 
            "title": "Runtime"
        }, 
        {
            "location": "/Internals/#android", 
            "text": "The plugin handles all manifest registrations when you make a build, the plugin  doesn't  override the default activity enabling it to work with the most used plugins in the Asset Store. The Deep Linking and Domain Association activation is checked everytime the game is opened or resumed.", 
            "title": "Android"
        }, 
        {
            "location": "/Internals/#iostvos", 
            "text": "The iOS integration uses a static library  libUniversalDeepLink.a  in order to receive information about the app activation. Just like on Android the plugin handles all registrations on  info.plist  and  entitlements  files. The library included in the plugin notifies it everytime the game was opened via deep link or domain association activation.", 
            "title": "iOS/tvOS"
        }, 
        {
            "location": "/Internals/#windows-uwp-windows-store-games", 
            "text": "Just like the previous mobile platforms, the plugin automatically configures the  Package.appxmanifest  file with your configuration.   In order for the plugin to work it edits the OnActivated event under  App.xaml.cs ,  App.xaml.cpp  or  App.cpp  depending on what  Build Type  (Xaml or D3D) and  Scripting Backend  (.NET or IL2CPP) you configure. The plugin should also work on  Xbox UWP  games but it was impossible to test on an actual console in order to get confirmation.", 
            "title": "Windows UWP (Windows Store Games)"
        }, 
        {
            "location": "/Internals/#linux-and-windows", 
            "text": "Linux the deep link registration is done the  first time the player opens the game . To accomplish this the plugin creates a  Desktop File  on the player machine, enabling the operating system to set up the game as a target of a custom protocol.   Windows, the game writes in the registry the information necessary to enable the OS to open the game every time the player clicks on a configured deep link URI.  The protocol registration is also done everytime the  Application.version  is changed, enabling you to change the configuration with an update.   If the game build is for Steam, the plugin configures Steam to be the target of your custom URI instead of the game (this is done to work around DRM) but configures Steam to launch your game with the Uri that opened steam.  Linux and Windows builds (Steam or Standalone) can't be activated via a Deep Link  after the game is already running.  This is because the link activation information is passed via argument on the  main  function, making it impossible (right now at least) to get information of the activation link after the game is already running.", 
            "title": "Linux and Windows"
        }, 
        {
            "location": "/Internals/#mac", 
            "text": "All manifest registrations are handled by the plugin, the deep linking activation is deferred from our library into the game as it happens, so MacOs builds won't have the caveats that Windows and Linux have.  In order to support Deep Linking we had to make a  library  ( UniversalDeepLink.framework ) that would intercept the activation events of the application itself since Unity doesn't allow the plugin to automatically link a library on the build process it must be done after the build. To make that possible the plugin includes the tool  optool .   optool allow us to inject the library into the game and collect all the activation events. If you build your game on MacOs the plugin  will automatically  call optool and inject the library. If you make the build on any other OS you will need to make an extra step, just has explained on the  Getting Started Section .   This requirement exists because optool was made for MacOs and the team couldn't in useful time port it to Windows.  For more info about how the library injection works check  here .", 
            "title": "Mac"
        }, 
        {
            "location": "/Showcase/", 
            "text": "Did you integrate the Universal Plugin in your game? Let us know and we will add it to the site and this list.\n\n\nSudoku Zenkai\n\n\n\n\n|| \nAndroid\n || \niOS\n || \nMicrosoft Store\n || \nSteam\n ||\n\n\n|| \nWebsite\n || \nTwitter\n || \nFacebook\n ||\n\n\nSuper Bunny Laser Spikes\n\n\n\n\n|| \nAndroid\n || \niOS\n || \nMicrosoft Store\n ||\n\n\n|| \nWebsite\n || \nTwitter\n || \nFacebook\n ||", 
            "title": "Showcase"
        }, 
        {
            "location": "/Showcase/#sudoku-zenkai", 
            "text": "||  Android  ||  iOS  ||  Microsoft Store  ||  Steam  ||  ||  Website  ||  Twitter  ||  Facebook  ||", 
            "title": "Sudoku Zenkai"
        }, 
        {
            "location": "/Showcase/#super-bunny-laser-spikes", 
            "text": "||  Android  ||  iOS  ||  Microsoft Store  ||  ||  Website  ||  Twitter  ||  Facebook  ||", 
            "title": "Super Bunny Laser Spikes"
        }, 
        {
            "location": "/About/", 
            "text": "ImaginationOverflow is a polyvalent group of people that come together in order to make software. They specialize in Apps made with Xamarin and Unity games. As indies, they published dozen of apps and games.\n\n\nAuthors\n\n\nDiogo Cardoso\n - \nTwitter\n --- \nLinkedIn\n\n\nAna Correia\n - \nLinkedIn\n\n\nLinks\n\n\nWebsite\n\n\nTwitter\n\n\nFacebook\n\n\nSteam Page\n\n\nPlay Store\n\n\nApp Store\n\n\nMicrosoft Store\n\n\nDiscord Server\n\n\nContact Email\n\n\nBlog\n\n\nAcknowledgements\n\n\n\n\nThe portuguese gamedev community for suggestions and support.\n\n\nGeri Borb\u00e1s\n for his awesome articles regarding unity plugins and library injection on MacOs\n\n\nAlex Zielenski\n for creating optool and open it for the community\n\n\nOur Patrons, Eric T, Tom T, Michael, Abdullah T", 
            "title": "About"
        }, 
        {
            "location": "/About/#authors", 
            "text": "Diogo Cardoso  -  Twitter  ---  LinkedIn  Ana Correia  -  LinkedIn", 
            "title": "Authors"
        }, 
        {
            "location": "/About/#links", 
            "text": "Website  Twitter  Facebook  Steam Page  Play Store  App Store  Microsoft Store  Discord Server  Contact Email  Blog", 
            "title": "Links"
        }, 
        {
            "location": "/About/#acknowledgements", 
            "text": "The portuguese gamedev community for suggestions and support.  Geri Borb\u00e1s  for his awesome articles regarding unity plugins and library injection on MacOs  Alex Zielenski  for creating optool and open it for the community  Our Patrons, Eric T, Tom T, Michael, Abdullah T", 
            "title": "Acknowledgements"
        }
    ]
}